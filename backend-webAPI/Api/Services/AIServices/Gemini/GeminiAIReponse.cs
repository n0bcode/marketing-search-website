using Api.Models;
using Api.Services.SearchServices;
using System.ComponentModel.DataAnnotations;
using System.ComponentModel.DataAnnotations.Schema;
using System.Text.Json;
using System.Text.Json.Serialization;

namespace Api.Services.AIServices.Gemini
{
    /// <summary>
    /// Represents the response from the Gemini AI model, including both raw API data and structured analysis.
    /// </summary>
    public class GeminiAIResponse
    {
        #region Database Properties

        [Key]
        public string Id { get; set; } = string.Empty;

        public string? SiteSearch { get; set; } = string.Empty;
        public string Note { get; set; } = string.Empty;
        public DateTime CreatedAt { get; set; } = DateTime.UtcNow;
        public DateTime UpdatedAt { get; set; } = DateTime.UtcNow;

        public string KeywordId { get; set; } = string.Empty;
        [ForeignKey("KeywordId")]
        public virtual KeywordModel? Keyword { get; set; }

        #endregion

        #region Raw Gemini API Response Properties

        [JsonPropertyName("candidates")]
        public List<Candidate> Candidates { get; set; } = new();

        [JsonPropertyName("usageMetadata")]
        public UsageMetadata UsageMetadata { get; set; } = new();

        [JsonPropertyName("modelVersion")]
        public string ModelVersion { get; set; } = string.Empty;

        public List<GeneralSearchResult> GeneralSearchResults { get; set; } = new();

        #endregion

        #region Structured AI Analysis Properties

        /// <summary>
        /// Gets or sets the structured analysis data generated by the AI.
        /// This property is populated by parsing the text content from the AI's response.
        /// </summary>
        [NotMapped] // This property is not mapped to the database
        public AnalysisResult? AnalysisData { get; set; }

        #endregion

        #region JSON Serialization/Deserialization

        /// <summary>
        /// Deserializes a JSON string into a <see cref="GeminiAIResponse"/> object.
        /// This method also attempts to parse the AI's text response into a structured <see cref="AnalysisResult"/>.
        /// </summary>
        /// <param name="json">The JSON string to deserialize.</param>
        /// <returns>A <see cref="GeminiAIResponse"/> object, or null if deserialization fails.</returns>
        public static GeminiAIResponse? FromJson(string json)
        {
            var options = new JsonSerializerOptions
            {
                PropertyNameCaseInsensitive = true
            };

            var geminiResponse = JsonSerializer.Deserialize<GeminiAIResponse?>(json, options);

            // Attempt to parse the AI's text response into structured AnalysisData
            if (geminiResponse != null && geminiResponse.Candidates != null && geminiResponse.Candidates.Any() &&
                geminiResponse.Candidates[0].Content != null && geminiResponse.Candidates[0].Content.Parts != null &&
                geminiResponse.Candidates[0].Content.Parts.Any())
            {
                string aiTextContent = geminiResponse.Candidates[0].Content.Parts[0].Text;
                try
                {
                    geminiResponse.AnalysisData = JsonSerializer.Deserialize<AnalysisResult>(aiTextContent, options);
                }
                catch (JsonException ex)
                {
                    // Log or handle the error if the AI's response is not valid JSON
                    Console.WriteLine($"Error parsing AI analysis data: {ex.Message}");
                }
            }

            return geminiResponse;
        }

        /// <summary>
        /// Serializes the <see cref="GeminiAIResponse"/> object to a JSON string.
        /// </summary>
        /// <returns>A JSON string representation of the object.</returns>
        public string ToJson()
        {
            var options = new JsonSerializerOptions
            {
                PropertyNamingPolicy = JsonNamingPolicy.CamelCase,
                WriteIndented = true,
                DefaultIgnoreCondition = JsonIgnoreCondition.WhenWritingNull
            };

            return JsonSerializer.Serialize(this, options);
        }

        #endregion
    }

    #region Helper Classes for Gemini API Response

    /// <summary>
    /// Represents a citation source within the AI response.
    /// </summary>
    public class CitationSource
    {
        /// <summary>
        /// Gets or sets the start index of the citation in the text.
        /// </summary>
        [JsonPropertyName("startIndex")]
        public int StartIndex { get; set; } = new();

        /// <summary>
        /// Gets or sets the end index of the citation in the text.
        /// </summary>
        [JsonPropertyName("endIndex")]
        public int EndIndex { get; set; } = new();
    }

    /// <summary>
    /// Represents citation metadata within the AI response.
    /// </summary>
    public class CitationMetadata
    {
        /// <summary>
        /// Gets or sets the list of citation sources.
        /// </summary>
        [JsonPropertyName("citationSources")]
        public List<CitationSource> CitationSources { get; set; } = new();
    }

    /// <summary>
    /// Represents a part of the content within the AI response.
    /// </summary>
    public class PartResponse
    {
        /// <summary>
        /// Gets or sets the text content of the part.
        /// </summary>
        [JsonPropertyName("text")]
        public string Text { get; set; } = string.Empty;
    }

    /// <summary>
    /// Represents the content of a candidate response from the AI.
    /// </summary>
    public class ContentResponse
    {
        /// <summary>
        /// Gets or sets the list of parts within the content response.
        /// </summary>
        [JsonPropertyName("parts")]
        public List<PartResponse> Parts { get; set; } = new();

        /// <summary>
        /// Gets or sets the role of the content (e.g., "model", "user").
        /// </summary>
        [JsonPropertyName("role")]
        public string Role { get; set; } = string.Empty;
    }

    /// <summary>
    /// Represents a candidate response from the AI.
    /// </summary>
    public class Candidate
    {
        /// <summary>
        /// Gets or sets the content of the candidate.
        /// </summary>
        [JsonPropertyName("content")]
        public ContentResponse Content { get; set; } = new();

        /// <summary>
        /// Gets or sets the reason the model stopped generating output.
        /// </summary>
        [JsonPropertyName("finishReason")]
        public string FinishReason { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the citation metadata for the candidate.
        /// </summary>
        [JsonPropertyName("citationMetadata")]
        public CitationMetadata CitationMetadata { get; set; } = new();

        /// <summary>
        /// Gets or sets the average log probabilities.
        /// </summary>
        [JsonPropertyName("avgLogprobs")]
        public double? AvgLogprobs { get; set; } = new();
    }

    /// <summary>
    /// Represents token details within the usage metadata.
    /// </summary>
    public class TokensDetails
    {
        /// <summary>
        /// Gets or sets the modality of the tokens (e.g., "text").
        /// </summary>
        [JsonPropertyName("modality")]
        public string Modality { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the count of tokens.
        /// </summary>
        [JsonPropertyName("tokenCount")]
        public int TokenCount { get; set; } = new();
    }

    /// <summary>
    /// Represents usage metadata for the AI response.
    /// </summary>
    public class UsageMetadata
    {
        /// <summary>
        /// Gets or sets the count of prompt tokens.
        /// </summary>
        [JsonPropertyName("promptTokenCount")]
        public int PromptTokenCount { get; set; } = new();

        /// <summary>
        /// Gets or sets the count of candidate tokens.
        /// </summary>
        [JsonPropertyName("candidatesTokenCount")]
        public int CandidatesTokenCount { get; set; } = new();

        /// <summary>
        /// Gets or sets the total count of tokens.
        /// </summary>
        [JsonPropertyName("totalTokenCount")]
        public int TotalTokenCount { get; set; } = new();

        /// <summary>
        /// Gets or sets the details of prompt tokens.
        /// </summary>
        [JsonPropertyName("promptTokensDetails")]
        public List<TokensDetails> PromptTokensDetails { get; set; } = new();

        /// <summary>
        /// Gets or sets the details of candidate tokens.
        /// </summary>
        [JsonPropertyName("candidatesTokensDetails")]
        public List<TokensDetails> CandidatesTokensDetails { get; set; } = new();
    }

    #endregion

    #region Structured AI Analysis Classes

    /// <summary>
    /// Represents the overall structured analysis result from the AI.
    /// </summary>
    public class AnalysisResult
    {
        /// <summary>
        /// Gets or sets the title of the analysis content.
        /// </summary>
        [JsonPropertyName("tieuDe")]
        public string TieuDe { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the data source of the analysis.
        /// </summary>
        [JsonPropertyName("nguonDuLieu")]
        public string NguonDuLieu { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the evaluation section of the analysis.
        /// </summary>
        [JsonPropertyName("danhGia")]
        public Evaluation DanhGia { get; set; } = new Evaluation();

        /// <summary>
        /// Gets or sets the message for when no relevant data is found.
        /// </summary>
        [JsonPropertyName("thongBaoKhongCoDuLieu")]
        public string ThongBaoKhongCoDuLieu { get; set; } = string.Empty;
    }

    /// <summary>
    /// Represents the evaluation section of the AI analysis, including positive, negative, and general evaluations.
    /// </summary>
    public class Evaluation
    {
        /// <summary>
        /// Gets or sets the positive article evaluation.
        /// </summary>
        [JsonPropertyName("tichCuc")]
        public ArticleEvaluation TichCuc { get; set; } = new ArticleEvaluation();

        /// <summary>
        /// Gets or sets the negative article evaluation.
        /// </summary>
        [JsonPropertyName("tieuCuc")]
        public ArticleEvaluation TieuCuc { get; set; } = new ArticleEvaluation();

        /// <summary>
        /// Gets or sets the general evaluation content.
        /// </summary>
        [JsonPropertyName("danhGiaChung")]
        public string DanhGiaChung { get; set; } = string.Empty;
    }

    /// <summary>
    /// Represents an evaluation of articles (positive or negative).
    /// </summary>
    public class ArticleEvaluation
    {
        /// <summary>
        /// Gets or sets the count of articles.
        /// </summary>
        [JsonPropertyName("soLuong")]
        public int SoLuong { get; set; } = 0;

        /// <summary>
        /// Gets or sets the list of articles.
        /// </summary>
        [JsonPropertyName("baiViet")]
        public List<Article> BaiViet { get; set; } = new List<Article>();
    }

    /// <summary>
    /// Represents a single article within an evaluation.
    /// </summary>
    public class Article
    {
        /// <summary>
        /// Gets or sets the summary of the article.
        /// </summary>
        [JsonPropertyName("tomTat")]
        public string TomTat { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the reason for the evaluation.
        /// </summary>
        [JsonPropertyName("lyDo")]
        public string LyDo { get; set; } = string.Empty;

        /// <summary>
        /// Gets or sets the link to the article.
        /// </summary>
        [JsonPropertyName("lienKet")]
        public string LienKet { get; set; } = string.Empty;
    }

    #endregion
}
